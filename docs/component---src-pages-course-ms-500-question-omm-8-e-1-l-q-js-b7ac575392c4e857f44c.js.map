{"version":3,"file":"component---src-pages-course-ms-500-question-omm-8-e-1-l-q-js-b7ac575392c4e857f44c.js","mappings":"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","sources":["webpack://WebSite/./src/pages/course/ms-500/question/Omm8e1L_Q.js"],"sourcesContent":["import * as React from \"react\"\r\nimport Page from '../../../../components/page'\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Form from 'react-bootstrap/Form'\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport Table from 'react-bootstrap/Table'\r\nimport { Link, navigate } from \"gatsby\"\r\nimport {saveDoc, onAuthStateChanged, getDoc} from '../../../../components/firebase'\r\nimport draftToHtml from 'draftjs-to-html'\r\n\r\n\r\nconst optionStyles = {\r\n  marginTop: '14px',\r\n  marginBottom: '14px',\r\n  display: 'flex'\r\n}\r\n \r\nconst checkboxStyles = {\r\n  display: 'flex',\r\n  alignItems: 'center',\r\n  justifyContent: 'center'\r\n}\r\n\r\nconst referencesStyle = {\r\n  marginTop: '24px'\r\n}\r\n\r\nconst bottomButtonStyle = {\r\n  marginTop: '24px'\r\n}\r\n\r\nconst isBrowser = () => typeof window !== 'undefined'\r\n\r\nclass EditQuestionPage extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.setUid = this.setUid.bind(this)\r\n    this.handleCorrectAnswerChange = this.handleCorrectAnswerChange.bind(this)\r\n    this.toggleShowAnswer = this.toggleShowAnswer.bind(this)\r\n    this.toggleShowQuestions = this.toggleShowQuestions.bind(this)\r\n    this.gotoQuestion = this.gotoQuestion.bind(this)\r\n    this.toggleEndExam = this.toggleEndExam.bind(this)\r\n    this.endExam = this.endExam.bind(this)\r\n    const params = new URLSearchParams(props.location.search)\r\n\r\n    this.state = {\r\n      questions: {},\r\n      uid: '',\r\n      testId: params.get('testId'),\r\n      test: {},\r\n      question: {\"answers\":[{\"isCorrectAnswer\":false,\"value\":\"Device1 and Device2 only\"},{\"value\":\"Device1 only\",\"isCorrectAnswer\":false},{\"value\":\"Device1 and Device3 only\",\"isCorrectAnswer\":false},{\"isCorrectAnswer\":true,\"value\":\"Device1, Device2 and Device3\"}],\"id\":\"Omm8e1L_Q\",\"question\":{\"blocks\":[{\"entityRanges\":[],\"inlineStyleRanges\":[],\"type\":\"unstyled\",\"data\":{},\"key\":\"9cg9\",\"depth\":0,\"text\":\"You have a Microsoft 365 subscription and a Microsoft Defender for Endpoints subscription.\"},{\"depth\":0,\"type\":\"unstyled\",\"text\":\"You have devices enrolled in Microsoft Endpoint Manager as shown in the following table:\",\"entityRanges\":[],\"data\":{},\"inlineStyleRanges\":[],\"key\":\"8osik\"},{\"text\":\" \",\"inlineStyleRanges\":[],\"data\":{},\"key\":\"4narm\",\"entityRanges\":[{\"length\":1,\"offset\":0,\"key\":0}],\"type\":\"atomic\",\"depth\":0},{\"data\":{},\"inlineStyleRanges\":[],\"depth\":0,\"key\":\"2ns91\",\"type\":\"unstyled\",\"text\":\"You integrate Microsoft Defender for Endpoints and Endpoint Manager.\",\"entityRanges\":[]},{\"depth\":0,\"text\":\"You plan to evaluate the Microsoft Defender for Endpoints risk level for the devices.\",\"entityRanges\":[],\"key\":\"4qdk2\",\"type\":\"unstyled\",\"inlineStyleRanges\":[],\"data\":{}},{\"key\":\"3dlb2\",\"inlineStyleRanges\":[],\"text\":\"You need to identify which devices can be evaluated.\",\"entityRanges\":[],\"type\":\"unstyled\",\"data\":{},\"depth\":0},{\"key\":\"dev05\",\"text\":\"Which devices should you identify?\",\"depth\":0,\"entityRanges\":[],\"type\":\"unstyled\",\"inlineStyleRanges\":[],\"data\":{}}],\"entityMap\":{\"0\":{\"type\":\"IMAGE\",\"mutability\":\"MUTABLE\",\"data\":{\"height\":\"auto\",\"alt\":\"Device platform chart\",\"alignment\":\"left\",\"src\":\"https://i.ibb.co/XVRnnsz/device-platform.png\",\"width\":\"auto\"}}}},\"references\":{\"entityMap\":{\"0\":{\"data\":{\"targetOption\":\"_blank\",\"url\":\"https://www.gitbit.org/course/ms-500/learn/Protecting-Windows-10-and-other-devices-with-Microsoft-Defender-for-Endpoint-z0qPG6v4T\"},\"mutability\":\"MUTABLE\",\"type\":\"LINK\"},\"1\":{\"mutability\":\"MUTABLE\",\"type\":\"LINK\",\"data\":{\"targetOption\":\"_blank\",\"url\":\"https://docs.microsoft.com/en-us/windows/security/threat-protection/microsoft-defender-atp/evaluation-lab\"}}},\"blocks\":[{\"key\":\"a7o7a\",\"inlineStyleRanges\":[],\"data\":{},\"entityRanges\":[],\"depth\":0,\"type\":\"unstyled\",\"text\":\"Microsoft Defender for Endpoints / Intune risk levels supports Windows 10, Windows 11, Android, iOS, and Mac\"},{\"key\":\"a2h0b\",\"inlineStyleRanges\":[],\"text\":\"Reference:\",\"entityRanges\":[],\"data\":{},\"depth\":0,\"type\":\"unstyled\"},{\"type\":\"unstyled\",\"key\":\"4i1hk\",\"inlineStyleRanges\":[],\"entityRanges\":[{\"length\":129,\"offset\":0,\"key\":0}],\"depth\":0,\"data\":{},\"text\":\"https://www.gitbit.org/course/ms-500/learn/Protecting-Windows-10-and-other-devices-with-Microsoft-Defender-for-Endpoint-z0qPG6v4T\"},{\"data\":{},\"text\":\"https://docs.microsoft.com/en-us/windows/security/threat-protection/microsoft-defender-atp/evaluation-lab https://docs.microsoft.com/en-us/windows/security/threat-protection/microsoft-defender-atp/minimum-requirements\",\"entityRanges\":[{\"length\":217,\"key\":1,\"offset\":0}],\"key\":\"6qlfe\",\"depth\":0,\"type\":\"unstyled\",\"inlineStyleRanges\":[]}]}},\r\n      previousQuestionId: '',\r\n      nextQuestionId: '',\r\n      questionId: 'Omm8e1L_Q',\r\n      questionIdx: '',\r\n      questionHtml: `<p>You have a Microsoft 365 subscription and a Microsoft Defender for Endpoints subscription.</p>\n<p>You have devices enrolled in Microsoft Endpoint Manager as shown in the following table:</p>\n<div style=\"text-align:left;\"><img src=\"https://i.ibb.co/XVRnnsz/device-platform.png\" alt=\"Device platform chart\" style=\"height: auto;width: auto\"/></div>\n<p>You integrate Microsoft Defender for Endpoints and Endpoint Manager.</p>\n<p>You plan to evaluate the Microsoft Defender for Endpoints risk level for the devices.</p>\n<p>You need to identify which devices can be evaluated.</p>\n<p>Which devices should you identify?</p>\n`,\r\n      questionText: `You have a Microsoft 365 subscription and a Microsoft Defender for Endpoints subscription. You have devices enrolled in Microsoft Endpoint Manager as shown in the following table: You integrate Microsoft Defender for Endpoints and Endpoint Manager. You plan to evaluate the Microsoft Defender for Endpoints risk level for the devices. You need to identify which devices can be evaluated. Which devices should you identify?`,\r\n      referencesHtml: `<p>Microsoft Defender for Endpoints / Intune risk levels supports Windows 10, Windows 11, Android, iOS, and Mac</p>\n<p>Reference:</p>\n<p><a href=\"https://www.gitbit.org/course/ms-500/learn/Protecting-Windows-10-and-other-devices-with-Microsoft-Defender-for-Endpoint-z0qPG6v4T\" target=\"_blank\">https://www.gitbit.org/course/ms-500/learn/Protecting-Windows-10-and-other-devices-with-Microsoft-Defender-for-Endpoint-z0qPG6v4T</a></p>\n<p><a href=\"https://docs.microsoft.com/en-us/windows/security/threat-protection/microsoft-defender-atp/evaluation-lab\" target=\"_blank\">https://docs.microsoft.com/en-us/windows/security/threat-protection/microsoft-defender-atp/evaluation-lab https://docs.microsoft.com/en-us/windows/security/threat-protection/microsoft-defender-atp/minimum-requirements</a></p>\n`,\r\n      selectedAnswer: [],\r\n      answerShown: false,\r\n      questionsShown: false,\r\n      endExamShown: false,\r\n      endExamText: 'Are you sure you want to end the exam?'\r\n    }\r\n\r\n    this.state.jsonLd = {\r\n      datePublished: '9-8-2021',\r\n      keywords: [\r\n  \t\t\t\"Microsoft\",\r\n  \t\t\t\"Microsoft 365\",\r\n  \t\t\t\"Office 365\",\r\n        'MS-500',\r\n        'Microsoft 365 Security Administration'\r\n  \t\t],\r\n      mainEntity: {\r\n        '@type': \"Question\",\r\n        name: this.state.questionText.substring(0, 150),\r\n        text: this.state.questionText,\r\n        answerCount: this.state.question.answers ? this.state.question.answers.length : 0,\r\n        dateCreated: \"2021-09-08T16:52:31Z\",\r\n        author: {\r\n          \"@type\": \"Person\",\r\n          \"name\": \"John Gruber\",\r\n          url: 'https://medium.com/@gruberjl'\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.state.question.answers) {\r\n      this.state.jsonLd.mainEntity.acceptedAnswer = {\r\n        \"@type\": \"Answer\",\r\n        \"text\": this.state.question.answers ? this.state.question.answers.filter(answer => answer.isCorrectAnswer).map(a => a.value).join('; ') : 'None',\r\n        author: {\r\n          type: 'Person',\r\n          name: 'John Gruber',\r\n          url: 'https://medium.com/@gruberjl'\r\n        },\r\n        upvoteCount: 1,\r\n        dateCreated: \"2021-09-08T16:52:31Z\"\r\n      }\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (isBrowser()) {\r\n      this.onAuthStateChangedListener = onAuthStateChanged(this.setUid)\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.onAuthStateChangedListener()\r\n  }\r\n\r\n  setUid(user) {\r\n    if (user) {\r\n      this.setState({\r\n        uid: user.uid\r\n      })\r\n\r\n      if (this.state.testId) {\r\n        getDoc(`users/${this.state.uid}/tests`, this.state.testId).then(test => {\r\n          let previousQuestionId = ''\r\n          let nextQuestionId = ''\r\n          let currentQuestion\r\n          let previousItm\r\n          let foundQuestion = false\r\n          let questionIdx\r\n          let selectedAnswer = this.state.selectedAnswer\r\n\r\n          test.questions.forEach((question, idx) => {\r\n            if (foundQuestion) {\r\n                nextQuestionId = question.id\r\n                foundQuestion = false\r\n            }\r\n\r\n            if (this.state.questionId === question.id) {\r\n              foundQuestion = true\r\n              currentQuestion = question\r\n              questionIdx = idx+1\r\n              if (previousItm)\r\n                previousQuestionId = previousItm.id\r\n\r\n              if (currentQuestion.answered)\r\n                selectedAnswer = currentQuestion.answered\r\n            }\r\n\r\n            previousItm = question\r\n          })\r\n\r\n          getDoc(`Tests/MS-500/Questions`, currentQuestion.id).then(question => {\r\n            const questionHtml = draftToHtml(question.question)\r\n            const referencesHtml = draftToHtml(question.references)\r\n            this.setState({question, questionHtml, referencesHtml})\r\n          })\r\n\r\n          this.setState({\r\n            test,\r\n            questionIdx: questionIdx,\r\n            nextQuestionId: nextQuestionId,\r\n            previousQuestionId: previousQuestionId,\r\n            selectedAnswer\r\n          })\r\n        })\r\n      } else {\r\n        getDoc(`Tests/MS-500/Questions`, this.state.questionId).then(question => {\r\n          const questionHtml = draftToHtml(question.question)\r\n          const referencesHtml = draftToHtml(question.references)\r\n          this.setState({question, questionHtml, referencesHtml})\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  handleCorrectAnswerChange(event) {\r\n    const idx = event.target.dataset.index\r\n    const target = event.target\r\n    const selectedAnswer = [...this.state.selectedAnswer]\r\n\r\n    if (target.checked) {\r\n      selectedAnswer.push(idx)\r\n    } else {\r\n      const index = selectedAnswer.indexOf(`${idx}`)\r\n      selectedAnswer.splice(index, 1)\r\n    }\r\n\r\n    this.setState({selectedAnswer})\r\n\r\n    if (this.state.testId) {\r\n      const test = Object.assign({}, this.state.test)\r\n\r\n      test.questions = test.questions.map(question => {\r\n        if (question.id === this.state.questionId) {\r\n          question.answered = selectedAnswer\r\n        }\r\n        return question\r\n      })\r\n\r\n      saveDoc(`users/${this.state.uid}/tests`, test)\r\n\r\n      this.setState({test})\r\n    }\r\n  }\r\n\r\n  toggleShowAnswer() {\r\n    const answerShown = !this.state.answerShown\r\n    this.setState({answerShown})\r\n  }\r\n\r\n  toggleShowQuestions() {\r\n    const questionsShown = !this.state.questionsShown\r\n    this.setState({questionsShown})\r\n  }\r\n\r\n  toggleEndExam() {\r\n    const endExamShown = !this.state.endExamShown\r\n    this.setState({endExamShown})\r\n  }\r\n\r\n  gotoQuestion(questionId) {\r\n    return () => {\r\n      navigate(`/course/ms-500/question/${questionId}?testId=${this.state.testId}`)\r\n    }\r\n  }\r\n\r\n  endExam() {\r\n    const test = this.state.test\r\n    test.isComplete = true\r\n\r\n    saveDoc(`users/${this.state.uid}/tests`, test).then(() => {\r\n      navigate(`/tests/summary?testId=${this.state.testId}`)\r\n    })\r\n  }\r\n\r\n  render() {\r\n    let answers = this.state.question.answers ? this.state.question.answers : []\r\n\r\n    answers = [...answers].map((answer, index) => {\r\n      answer.isSelected = this.state.selectedAnswer.includes(`${index}`)\r\n      answer.optionStyles = Object.assign({}, optionStyles)\r\n      if (this.state.answerShown && answer.isCorrectAnswer) {\r\n        answer.optionStyles.background = 'green'\r\n      }\r\n\r\n      return answer\r\n    })\r\n\r\n    return (\r\n      <Page jsonLdType={'QAPage'} jsonLd={this.state.jsonLd} title={this.state.questionText} description={this.state.questionText}>\r\n        <main>\r\n          <div>\r\n            <Container>\r\n              <Row>\r\n                <Col md={6} xs={12} lg={8}><h1>Question {this.state.questionIdx}</h1></Col>\r\n                <Col md={6} xs={12} lg={4} className='flex-space-between'> {\r\n                  this.state.previousQuestionId !== '' ?\r\n                    <Button as={Link} to={`/course/ms-500/question/${this.state.previousQuestionId}?testId=${this.state.testId}`}>Previous Question</Button> :\r\n                    ''\r\n                  }\r\n                  {\r\n                    this.state.nextQuestionId !== '' ?\r\n                      <Button as={Link} to={`/course/ms-500/question/${this.state.nextQuestionId}?testId=${this.state.testId}`}>Next Question</Button> : (\r\n                          this.state.testId ?\r\n                            <Button onClick={this.toggleEndExam} variant=\"warning\">End Exam</Button> :\r\n                            ''\r\n                      )\r\n\r\n                  }\r\n                </Col>\r\n              </Row>\r\n              <Row className=\"img-width-100\">\r\n                { this.state.questionHtml !== '' ?\r\n                  <div dangerouslySetInnerHTML={{__html: this.state.questionHtml}}></div>\r\n                  : ''\r\n                }\r\n              </Row>\r\n              <Row>\r\n                {answers.map((answerState, index) => {\r\n                  return (\r\n                    <div style={answerState.optionStyles} key={index}>\r\n                      <Form.Check type=\"checkbox\" name={\"AnswerCheck\" + index} id={\"AnswerCheck\" + index} data-index={index} inline style={checkboxStyles} checked={this.state.selectedAnswer.includes(`${index}`)} onChange={this.handleCorrectAnswerChange} />\r\n                      <label htmlFor={\"AnswerCheck\" + index}>{answerState.value}</label>\r\n                    </div>\r\n                  )\r\n                })}\r\n              </Row>\r\n              <Row>\r\n                <Col>\r\n                  { this.state.answerShown ?\r\n                    <div style={referencesStyle} dangerouslySetInnerHTML={{__html: this.state.referencesHtml}}></div> :\r\n                    ''\r\n                  }\r\n                </Col>\r\n              </Row>\r\n              <Row className='align-right'><Col md={6} xs={12} lg={8}></Col>\r\n              <Col md={6} xs={12} lg={4} className='flex-space-between'> {\r\n                  this.state.previousQuestionId !== '' ?\r\n                    <Button as={Link} to={`/course/ms-500/question/${this.state.previousQuestionId}?testId=${this.state.testId}`}>Previous Question</Button> :\r\n                    ''\r\n                  }\r\n                {\r\n                  this.state.nextQuestionId !== '' ?\r\n                    <Button as={Link} to={`/course/ms-500/question/${this.state.nextQuestionId}?testId=${this.state.testId}`}>Next Question</Button> :\r\n                    this.state.testId ?\r\n                      <Button onClick={this.toggleEndExam} variant=\"warning\">End Exam</Button> :\r\n                      ''\r\n                  }\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col xs={12} md={6}>\r\n                  <Button onClick={this.toggleShowAnswer} style={bottomButtonStyle}>\r\n                    { this.state.answerShown ?\r\n                      <span>Hide Answer</span> :\r\n                      <span>Show Answer</span>\r\n                    }\r\n                  </Button>\r\n                </Col>\r\n                { this.state.testId ?\r\n                  <Col xs={12} md={6} className='align-right'>\r\n                    <Button onClick={this.toggleShowQuestions} style={bottomButtonStyle}>\r\n                      { this.state.questionsShown ?\r\n                        <span>Hide Question List</span> :\r\n                        <span>Show Question List</span>\r\n                      }\r\n                    </Button>\r\n                  </Col> :\r\n                  ''\r\n                }\r\n              </Row>\r\n              { this.state.testId ?\r\n                <Row>\r\n                  <Col className='align-right'>\r\n                    <Button onClick={this.toggleEndExam} variant=\"warning\" style={bottomButtonStyle}>End Exam</Button>\r\n                  </Col>\r\n                </Row> :\r\n                ''\r\n              }\r\n            </Container>\r\n          </div>\r\n\r\n          <Modal show={this.state.questionsShown} onHide={this.toggleShowQuestions}>\r\n            <Modal.Header>\r\n              <Modal.Title>Showing Test Questions</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n              <Table striped bordered hover>\r\n                <thead>\r\n                  <tr>\r\n                    <th>#</th>\r\n                    <th>Answer</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  { this.state.test && this.state.test.questions ? this.state.test.questions.map((question, idx) => (\r\n                    <tr key={idx} onClick={this.gotoQuestion(question.id)} className=\"cursor-pointer\">\r\n                      <td>{idx+1}</td>\r\n                      <td>{question.answered}</td>\r\n                    </tr>\r\n                  )) : '' }\r\n                </tbody>\r\n              </Table>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n              <Button variant=\"primary\" onClick={this.toggleShowQuestions}>\r\n                Close\r\n              </Button>\r\n            </Modal.Footer>\r\n          </Modal>\r\n\r\n          <Modal show={this.state.endExamShown} onHide={this.toggleEndExam}>\r\n            <Modal.Header>\r\n              <Modal.Title>Are you sure?</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n              { this.state.endExamText }\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n              <Button variant=\"primary\" onClick={this.endExam}>\r\n                Yes\r\n              </Button>\r\n              <Button variant=\"secondary\" onClick={this.toggleEndExam}>\r\n                No\r\n              </Button>\r\n            </Modal.Footer>\r\n          </Modal>\r\n        </main>\r\n      </Page>\r\n    )\r\n  }\r\n}\r\n\r\nexport default EditQuestionPage\r\n"],"names":["optionStyles","marginTop","marginBottom","display","checkboxStyles","alignItems","justifyContent","referencesStyle","bottomButtonStyle","EditQuestionPage","props","setUid","bind","handleCorrectAnswerChange","toggleShowAnswer","toggleShowQuestions","gotoQuestion","toggleEndExam","endExam","params","URLSearchParams","location","search","state","questions","uid","testId","get","test","question","previousQuestionId","nextQuestionId","questionId","questionIdx","questionHtml","questionText","referencesHtml","selectedAnswer","answerShown","questionsShown","endExamShown","endExamText","jsonLd","datePublished","keywords","mainEntity","name","substring","text","answerCount","answers","length","dateCreated","author","url","acceptedAnswer","filter","answer","isCorrectAnswer","map","a","value","join","type","upvoteCount","componentDidMount","window","this","onAuthStateChangedListener","onAuthStateChanged","componentWillUnmount","user","setState","getDoc","then","currentQuestion","previousItm","foundQuestion","forEach","idx","id","answered","draftToHtml","references","event","target","dataset","index","checked","push","indexOf","splice","Object","assign","saveDoc","navigate","isComplete","render","isSelected","includes","background","jsonLdType","title","description","md","xs","lg","className","as","Link","to","onClick","variant","dangerouslySetInnerHTML","__html","answerState","style","key","inline","onChange","htmlFor","show","onHide","striped","bordered","hover","React"],"sourceRoot":""}