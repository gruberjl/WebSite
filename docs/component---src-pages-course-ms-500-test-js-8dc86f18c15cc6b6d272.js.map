{"version":3,"file":"component---src-pages-course-ms-500-test-js-8dc86f18c15cc6b6d272.js","mappings":"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","sources":["webpack://WebSite/./src/components/firebase/index.js","webpack://WebSite/./src/pages/course/ms-500/test.js"],"sourcesContent":["import { initializeApp } from 'firebase/app'\r\nimport { getFirestore, collection, doc, getDocs, query, deleteDoc as DeleteDoc, getDoc as GetDoc, setDoc } from 'firebase/firestore'\r\nimport { getAuth as GetAuth, onAuthStateChanged as OnAuthStateChanged, signInWithEmailAndPassword as SignInWithEmailAndPassword, createUserWithEmailAndPassword as CreateUserWithEmailAndPassword, signOut as SignOut  } from 'firebase/auth'\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBAnWR_MHwMJtAGtisRow9dFPJQ3vUy_Vw\",\r\n  authDomain: \"web-server-9d634.firebaseapp.com\",\r\n  databaseURL: \"https://web-server-9d634.firebaseio.com\",\r\n  projectId: \"web-server-9d634\",\r\n  storageBucket: \"web-server-9d634.appspot.com\",\r\n  messagingSenderId: \"54819552991\",\r\n  appId: \"1:54819552991:web:bf1a4246ed6c35a98ab36a\"\r\n}\r\n\r\nconst app = initializeApp(firebaseConfig)\r\nlet db, auth\r\n\r\nconst getDb = () => {\r\n  if (!db) {\r\n    getAuth()\r\n    db = getFirestore(app)\r\n  }\r\n \r\n  return db\r\n}\r\n\r\nconst getAuth = () => {\r\n  if (!auth)\r\n    auth = GetAuth()\r\n\r\n  return auth\r\n}\r\n\r\nconst onAuthStateChanged = (callback) => {\r\n  const auth = getAuth()\r\n\r\n  return OnAuthStateChanged(auth, callback)\r\n}\r\n\r\nconst signInWithEmailAndPassword = (email, password) => {\r\n  return SignInWithEmailAndPassword(getAuth(), email, password)\r\n}\r\n\r\nconst createUserWithEmailAndPassword = (email, password) => {\r\n  return CreateUserWithEmailAndPassword(getAuth(), email, password)\r\n}\r\n\r\nconst getDoc = (path, id) => {\r\n  return GetDoc(doc(getDb(), path, id))\r\n    .then(docSnapshot => docSnapshot.data())\r\n}\r\n\r\nconst getAllDocs = (path) => {\r\n  return getDocs(collection(getDb(), path)).then(snapshotToDocs)\r\n}\r\n\r\nconst snapshotToDocs = (snapshot) => {\r\n  const docs = []\r\n  snapshot.forEach(doc => { docs.push(doc.data()) })\r\n  return docs\r\n}\r\n\r\nconst deleteDoc = (path, id) => {\r\n  return DeleteDoc(doc(getDb(), path, id))\r\n}\r\n\r\nconst saveDoc = (path, data) => {\r\n  return setDoc(doc(getDb(), path, data.id), data, { merge: true })\r\n}\r\n\r\nconst signOut = () => {\r\n  const auth = getAuth()\r\n  return SignOut(auth)\r\n}\r\n\r\nexport {getDb, getAuth, onAuthStateChanged, signInWithEmailAndPassword, createUserWithEmailAndPassword, getDoc, getAllDocs, collection, query, saveDoc, deleteDoc, signOut}\r\n","import * as React from \"react\"\r\nimport Page from '../../../components/page'\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Button from 'react-bootstrap/Button'\r\nimport { Link, navigate } from \"gatsby\"\r\nimport {getDb, onAuthStateChanged, getDoc} from '../../../components/firebase'\r\n\r\nconst isBrowser = () => typeof window !== 'undefined'\r\n\r\nclass TestPage extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.setUid = this.setUid.bind(this)\r\n\r\n    if (isBrowser()) {\r\n      this.db = getDb()\r\n    }\r\n\r\n    const params = new URLSearchParams(props.location.search)\r\n\r\n    this.state = {\r\n      docs: [],\r\n      testId: params.get('testid'),\r\n      nextQuestionId: ''\r\n    }\r\n  } \r\n\r\n  componentDidMount() {\r\n    if (isBrowser()) {\r\n      this.onAuthStateChangedListener = onAuthStateChanged(this.setUid)\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.onAuthStateChangedListener()\r\n  }\r\n\r\n  setUid(user) {\r\n    if (user) {\r\n      this.setState({\r\n        uid: user.uid\r\n      })\r\n\r\n      getDoc(`users/${this.state.uid}/tests`, this.state.testId).then(test => {\r\n        console.log(test.questions[0])\r\n        this.setState({\r\n          test,\r\n          nextQuestionId: test.questions[0].id\r\n        })\r\n      })\r\n    } else {\r\n      navigate(\"/login\")\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Page title={'Ready to begin your exam?'} description={'Microsoft 365 MS-500 practice test prep page'}>\r\n        <main>\r\n          <div>\r\n            <Container>\r\n              <Row>\r\n                <Col>\r\n                  <h1>MS-500 Test</h1>\r\n                  <h2>Skills measured</h2>\r\n                  <ul>\r\n                    <li>Implement and manage identity and access (30-35%)</li>\r\n                    <li>Implement and manage threat protection (20-25%)</li>\r\n                    <li>Implement and manage information protection (15-20%)</li>\r\n                    <li>Manage governance and compliance features in Microsoft 365 (25-30%)</li>\r\n                  </ul>\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col>\r\n                  { this.state.nextQuestionId ?\r\n                    <Button as={Link} variant=\"primary\" size=\"lg\" to={`/course/ms-500/question/${this.state.nextQuestionId}?testId=${this.state.testId}`}>Start Test</Button> :\r\n                    <span>Please wait for the test to load</span>\r\n                  }\r\n                </Col>\r\n              </Row>\r\n            </Container>\r\n          </div>\r\n        </main>\r\n      </Page>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TestPage\r\n"],"names":["db","auth","app","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","getDb","getAuth","getFirestore","GetAuth","onAuthStateChanged","callback","OnAuthStateChanged","signInWithEmailAndPassword","email","password","SignInWithEmailAndPassword","createUserWithEmailAndPassword","CreateUserWithEmailAndPassword","getDoc","path","id","GetDoc","doc","then","docSnapshot","data","getAllDocs","getDocs","collection","snapshotToDocs","snapshot","docs","forEach","push","deleteDoc","DeleteDoc","saveDoc","setDoc","merge","isBrowser","window","TestPage","props","setUid","bind","params","URLSearchParams","location","search","state","testId","get","nextQuestionId","componentDidMount","this","onAuthStateChangedListener","componentWillUnmount","user","setState","uid","test","console","log","questions","navigate","render","title","description","as","Link","variant","size","to","React"],"sourceRoot":""}